% /=====================================================================\ %
% |  latexmlleeds.sty                                                   | %
% | Style file for Leeds tweaks to latexml documents                    | %
% |=====================================================================| %
% | Vincenzo Mantova <v.l.mantova@leeds.ac.uk>                          | %
% \=====================================================================/ %

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{latexmlleeds}[2020/09/07+\varepsilon Leeds tweaks to latexml documents]

% We need \iflatexml
\RequirePackage{latexml}

% We need T1 font encoding to parse correctly < and >
\RequirePackage[T1]{fontenc}

%%% Output HTML from LaTeX
% Do nothing in normal LaTeX, output argument as HTML in LaTeXML
\let\ldsHTML\@gobble
\let\lxHTML\ldsHTML % DEPRECATED, only here for backward compatibility

% Example:
% \ldsHTML{This appears <strong>only in the HTML-based outputs</strong>.}

%%% NOTES
%
% 1. The HTML must be written in "XML serialisation", hence all tags must
%    be closed (e.g. <br> must be written as <br/>).
%
% 2. The HTML is still interpreted as LaTeX code, hence it must be escaped
%    appropriately. For instance, every { must be replaced by \{; every &
%    must be replaced by \& (and probably be written as \&amp;).

\RequirePackage{xkeyval}

%%% TikZ workaround

\newif\ifLDS@tikzextern
\newif\ifLDS@tikztosvg

\DeclareOptionX{tikzextern}[images/TikZ-]{
  \LDS@tikzexterntrue
  \def\LDS@tikzextern{#1}
}

\DeclareOptionX{tikz2svg}[pdf2svg]{
  \ifdefined\LDS@tikzextern
  \else
    \LDS@tikzexterntrue
    \def\LDS@tikzextern{\LDS@tikzextern@default}
  \fi
  \LDS@tikztosvgtrue
  \def\LDS@tikztosvg{#1}
}

\ProcessOptionsX

\ifLDS@tikzextern
  \iflatexml
    \RequirePackage{graphicx}
    \RequirePackage{environ}
    % environ uses \@checkend, which is not implemented by LaTeXML
    % below is a copy from latex.ltx
    \def\@checkend#1{\def\reserved@a{#1}\ifx
          \reserved@a\@currenvir \else\@badend{#1}\fi}

    % create the picture counter
    \newcounter{LDS@tikzpicturecounter}

    % set up tikzpicture replacement: include the image and
    % increment the counter
    \newcommand{\LDS@includetikzexternalized}{%
      \includegraphics{\LDS@tikzextern\theLDS@tikzpicturecounter}%
      \stepcounter{LDS@tikzpicturecounter}%
    }

    % replace the tikzpicture environment with
    % \latexmlleeds@includetikzexternalized
    \RenewEnviron{tikzpicture}{\LDS@includetikzexternalized}

    % DEPRECATED: included for backward compatibility
    \let\includetikzexternalized\LDS@includetikzexternalized
  \else
    \RequirePackage{tikz}
    \usetikzlibrary{external}

    % ask TikZ to export all figures to external files
    % recall to call pdflatex with the option -shell-escape to make this work
    \tikzexternalize[figure name=\LDS@tikzextern]
  \fi
\fi

\ifLDS@tikztosvg
  \iflatexml
  \else
    % extend the pdflatex call to also convert the output to SVG
    \tikzset{external/system call={%
      % call pdflatex (this is the TikZ default as per documentation)
      pdflatex \tikzexternalcheckshellescape -halt-on-error -interaction=batchmode -jobname "\image" "\texsource"; %
      % convert using pdf2svg
      \LDS@tikztosvg\space "\image.pdf" "\image.svg" ; %
      % scale up the SVG by the factor 1.33 = 96 (dpi on web) / 72 (dpi on PDF)
      % it suffices to multiply width and height by 1.33
      % for readability, the actual command is:
      % perl -pi.orig -e 's/(width|height)="(\d+\.\d+)pt"/$1."=\"".sprintf("\%.3f",$2*1.33)."pt\""/eg' "\image.svg"
      % apologies for the perl golf
      perl -pi.orig -e 's/(width|height)="(\@backslashchar d+\@backslashchar.\@backslashchar d+)pt"/\string$1."=\@backslashchar"".sprintf("\%.3f",\string$2*1.33)."pt\@backslashchar""/eg' "\image.svg"%
    }}
  \fi
\fi
